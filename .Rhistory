if( i == "T"){
countT <- countT +1
}
if( i == "G"){
countG <- countG +1
}
if (i =="C"){
countC <- countC +1
}
}
cat("A:", countA, "T:", countT, "G:", countG, "C:", countC)
}
percents <- nucleotide sequence(dna)
percents <- nucleotide_sequence(dna)
values <- nucleotide_sequence(dna)
print(dna)
nucleotide_sequence <- function(sequence){
countA <- 0
countT <- 0
countG <- 0
countC <- 0
for (i in sequence){
if (i == "a"){
countA <- countA +1
}
if( i == "t"){
countT <- countT +1
}
if( i == "g"){
countG <- countG +1
}
if (i =="c"){
countC <- countC +1
}
}
cat("A:", countA, "T:", countT, "G:", countG, "C:", countC)
}
values <- nucleotide_sequence(dna)
values <- nucleotide_sequence(dna)
print(values)
values <- nucleotide_sequence(dna)
#sequence.fasta es un archivo proveniente de la base de datos ncbi
ruta <- paste0(getwd(), .Platform$file.sep, "data", .Platform$file.sep, "sequence.fasta")
dna <-read.fasta("sequence.fasta")
print(dna)
nucleotide_sequence <- function(sequence) {
countA <- 0
countT <- 0
countG <- 0
countC <- 0
for (i in sequence) {
if (toupper(i) == "a") {
countA <- countA + 1
} else if (toupper(i) == "t") {
countT <- countT + 1
} else if (toupper(i) == "g") {
countG <- countG + 1
} else if (toupper(i) == "c") {
countC <- countC + 1
}
}
cat("A:", countA, "T:", countT, "G:", countG, "C:", countC)
}
values <- nucleotide_sequence(dna)
percentDNA<- function(sequence){
countA <- 0
countT <- 0
countG <- 0
countC <- 0
for (i in sequence){
if (i == "A"){
countA <- countA +1
}
if( i == "T"){
countT <- countT +1
}
if( i == "G"){
countG <- countG +1
}
if (i =="C"){
countC <- countC +1
}
}
cat("A:", countA, "T:", countT, "G:", countG, "C:", countC)
}
percents <- percentDNA(DNA)
DNA <-paste0(sequenceDNA(90))
sequenceDNA <-function(size){
x<- c("A", "T", "G", "C")
sample(x, size, replace = TRUE )
}
DNA <-paste0(sequenceDNA(90))
c("DNA:",  DNA, "DNA of 89:" , DNA_89)
DNA_89<-paste0(sequenceDNA(89))
c("DNA:",  DNA, "DNA of 89:" , DNA_89)
#sequence.fasta es un archivo proveniente de la base de datos ncbi
ruta <- paste0(getwd(), .Platform$file.sep, "data", .Platform$file.sep, "sequence.fasta")
dna <-read.fasta("sequence.fasta")
print(dna)
install.packages("stringr")
fasta_file <- "sequence.fasta"
fasta_lines <- readLines(fasta_file)
# Remove the header line
sequence <- paste(fasta_lines[-1], collapse = "")
# Optionally remove non-nucleotide characters
sequence <- gsub("[^ACTGactg]", "", sequence)
# Now 'sequence' contains your cleaned DNA sequence
print(sequence)
nucleotide_sequence <- function(sequence) {
countA <- 0
countT <- 0
countG <- 0
countC <- 0
for (i in sequence) {
if (toupper(i) == "a") {
countA <- countA + 1
} else if (toupper(i) == "t") {
countT <- countT + 1
} else if (toupper(i) == "g") {
countG <- countG + 1
} else if (toupper(i) == "c") {
countC <- countC + 1
}
}
cat("A:", countA, "T:", countT, "G:", countG, "C:", countC)
}
values <- nucleotide_sequence(sequence)
print(values)
values <- nucleotide_sequence(sequence)
fasta_file <- "sequence.fasta"
fasta_lines <- readLines(fasta_file)
# Remove the header line
sequence <- paste(fasta_lines[-1], collapse = "")
# Optionally remove non-nucleotide characters
sequence <- gsub("[^ACTGactg]", "", sequence)
# Now 'sequence' contains your cleaned DNA sequence
print(sequence)
nucleotide_sequence <- function(sequence) {
countA <- 0
countT <- 0
countG <- 0
countC <- 0
for (i in sequence) {
if (toupper(i) == "a") {
countA <- countA + 1
} else if (toupper(i) == "t") {
countT <- countT + 1
} else if (toupper(i) == "g") {
countG <- countG + 1
} else if (toupper(i) == "c") {
countC <- countC + 1
}
}
cat("A:", countA, "T:", countT, "G:", countG, "C:", countC)
}
values <- nucleotide_sequence(sequence)
print(values)
fasta_file <- "sequence.fasta"
fasta_lines <- readLines(fasta_file)
# Remove the header line
sequence <- paste(fasta_lines[-1], collapse = "")
# Optionally remove non-nucleotide characters
sequence <- gsub("[^ACTGactg]", "", sequence)
# Now 'sequence' contains your cleaned DNA sequence
print(sequence)
nucleotide_sequence <- function(sequence) {
countA <- 0
countT <- 0
countG <- 0
countC <- 0
for (i in sequence) {
if (toupper(i) == "A") {
countA <- countA + 1
} else if (toupper(i) == "T") {
countT <- countT + 1
} else if (toupper(i) == "G") {
countG <- countG + 1
} else if (toupper(i) == "C") {
countC <- countC + 1
}
}
cat("A:", countA, "T:", countT, "G:", countG, "C:", countC)
}
values <- nucleotide_sequence(sequence)
# Remove the header line
sequence <- paste(fasta_lines[-1], collapse = "")
# Optionally remove non-nucleotide characters
sequence <- gsub("[^ACTGactg]", "", sequence)
# Now 'sequence' contains your cleaned DNA sequence
print(sequence)
nucleotide_sequence <- function(sequence) {
countA <- 0
countT <- 0
countG <- 0
countC <- 0
for (i in sequence) {
if (toupper(i) == "A") {
countA <- countA + 1
} else if (toupper(i) == "T") {
countT <- countT + 1
} else if (toupper(i) == "G") {
countG <- countG + 1
} else if (toupper(i) == "C") {
countC <- countC + 1
}
}
counts <- c(A = countA, T = countT, G = countG, C = countC)
return(counts)
}
values <- nucleotide_sequence(sequence)
print(values)
# Now 'sequence' contains your cleaned DNA sequence
print(sequence)
#sequence.fasta es un archivo proveniente de la base de datos ncbi
fasta_file <- "sequence.fasta"
fasta_lines <- readLines(fasta_file)
# Remove the header line
sequence <- paste(fasta_lines[-1], collapse = "")
# Optionally remove non-nucleotide characters
sequence <- gsub("[^ACTGactg]", "", sequence)
# Now 'sequence' contains your cleaned DNA sequence
print(sequence)
nucleotide_sequence <- function(sequence) {
countA <- 0
countT <- 0
countG <- 0
countC <- 0
for (i in sequence) {
if (toupper(i) == "A") {
countA <- countA + 1
} else if (toupper(i) == "T") {
countT <- countT + 1
} else if (toupper(i) == "G") {
countG <- countG + 1
} else if (toupper(i) == "C") {
countC <- countC + 1
}
}
cat("A:", countA, "T:", countT, "G:", countG, "C:", countC, "\n")
}
# Split the sequence into smaller chunks
chunk_size <- 10
chunks <- strsplit(sequence, "")
for (chunk in chunks) {
nucleotide_sequence(chunk)
}
sequence <- c('ATGCTTGACGCTCAAACCATCGC')
complementary_strand <- function(sequence) {
complement <- chartr("ATGC", "TACG", sequence)
return(complement)
}
complementary_sequence <-complementary_strand(sequence)
print(complementary_sequence)
library(stringi)
library(seqinr)
sequence <- c('ATGCTTGACGCTCAAACCATCGC')
complementary_strand <- function(sequence) {
complement <- chartr("ATGC", "TACG", sequence)
return(complement)
}
complementary_sequence <-complementary_strand(sequence)
reverse <- stri_reverse(complementary_sequence)
complementary_reverse <- complementary_strand(reverse)
c('complementaria: ', complementary_sequence, '\nreversa: ', reverse, '\nreversa complementaria: ', complementary_reverse)
c('complementaria: ', complementary_sequence, '\nreversa: ', reverse, '\nreversa complementaria: ', complementary_reverse)
c('complementaria: ', complementary_sequence, 'reversa: ', reverse, 'reversa complementaria: ', complementary_reverse)
library(stringi)
library(seqinr)
sequence <- c('ATGCTTGACGCTCAAACCATCGC')
complementary_strand <- function(sequence) {
complement <- chartr("ATGC", "TACG", sequence)
return(complement)
}
complementary_sequence <-complementary_strand(sequence)
reverse <- stri_reverse(complementary_sequence)
complementary_reverse <- complementary_strand(reverse)
c('complementaria: ', complementary_sequence, 'reversa: ', reverse, 'reversa complementaria: ', complementary_reverse)
complementary_strand <- function(sequence) {
complement <- chartr("ATGC", "TACG", sequence)
return(complement)
}
complementary_sequence <-complementary_strand(sequence)
reverse <- stri_reverse(sequence)
complementary_reverse <- complementary_strand(complementary_sequence)
c('complementaria: ', complementary_sequence, 'reversa: ', reverse, 'reversa complementaria: ', complementary_reverse)
complementary_reverse <- complementary_strand(reverse)
c('complementaria: ', complementary_sequence, 'reversa: ', reverse, 'reversa complementaria: ', complementary_reverse)
DNASequence <- c('ATGCTTGACGCTCAAACCATCGCTACAGTAAAAGCCACCATCCCTTTACTGGTGGAAACGGGGCCAAAGTTAACCGCCCATTTCTACGACCGTATGTTTACTCATAACCCAGAACTCAAAGAAATTTTTAACATGAGTAACCAGCGTAATGGCGATCAACGTGAAGCCCTGTTTAACGCTATTGCCGCCTACGCCAGTAATATTGAAAACCTGCCTGCGCTGCTGCCAGCGGTAGAAAAAATCGCGCAGAAGCACACCAGCTTCCAGATCAAACCGGAACAGTACAACATCGTCGGTGAACACCTGTTGGCAACGCTGGACGAAATGTTCAGCCCGGGGCAGGAAGTGCTGGACGCGTGGGGTAAAGCCTATGGTGTACTGGCTAATGTATTTATCAATCGCGAGGCGGAAATCTATAACGAAAACGCCAGCAAAGCCGGTGGTTGGGAAGGTACTCGCGATTTCCGCATTGTGGCTAAAACACCGCGCAGCGCGCTTATCACCAGCTTCGAACTGGAGCCGGTCGACGGTGGCGCAGTGGCAGAATACCGTCCGGGGCAATATCTCGGCGTCTGGCTGAAGCCGGAAGGTTTCCCACATCAGGAAATTCGTCAGTACTCTTTGACTCGCAAACCGGATGGCAAAGGCTATCGTATTGCGGTGAAACGCGAAGAGGGTGGGCAGGTATCCAACTGGTTGCACAATCACGCCAATGTTGGCGATGTCGTGAAACTGGTCGCTCCGGCAGGTGATTTCTTTATGGCTGTCGCAGATGACACACCAGTGACGTTAATCTCTGCCGGTGTTGGTCAAACGCCAATGCTGGCAATGCTCGACACGCTGGCAAAAGCAGGCCACACAGCACAAGTGAACTGGTTCCATGCGGCAGAAAATGGCGATGTTCACGCCTTTGCCGATGAAGTTAAGGAACTGGGGCAGTCACTGCCGCGCTTTACCGCGCACACCTGGTATCGTCAGCCGAGCGAAGCCGATCGCGCTAAAGGTCAGTTTGATAGCGAAGGTCTGATGGATTTGAGCAAACTGGAAGGTGCGTTCAGCGATCCGACAATGCAGTTCTATCTCTGCGGCCCGGTTGGCTTCATGCAGTTTACCGCGAAACAGTTAGTGGATCTGGGCGTGAAGCAGGAAAACATTCATTACGAATGCTTTGGCCCGCATAAGGTGCTGTAA')
complementary_strand <- function(sequence) {
complement <- chartr("ATGC", "TACG", sequence)
return(complement)
}
DNASequence <- c('ATGCTTGACGCTCAAACCATCGCTACAGTAAAAGCCACCATCCCTTTACTGGTGGAAACGGGGCCAAAGTTAACCGCCCATTTCTACGACCGTATGTTTACTCATAACCCAGAACTCAAAGAAATTTTTAACATGAGTAACCAGCGTAATGGCGATCAACGTGAAGCCCTGTTTAACGCTATTGCCGCCTACGCCAGTAATATTGAAAACCTGCCTGCGCTGCTGCCAGCGGTAGAAAAAATCGCGCAGAAGCACACCAGCTTCCAGATCAAACCGGAACAGTACAACATCGTCGGTGAACACCTGTTGGCAACGCTGGACGAAATGTTCAGCCCGGGGCAGGAAGTGCTGGACGCGTGGGGTAAAGCCTATGGTGTACTGGCTAATGTATTTATCAATCGCGAGGCGGAAATCTATAACGAAAACGCCAGCAAAGCCGGTGGTTGGGAAGGTACTCGCGATTTCCGCATTGTGGCTAAAACACCGCGCAGCGCGCTTATCACCAGCTTCGAACTGGAGCCGGTCGACGGTGGCGCAGTGGCAGAATACCGTCCGGGGCAATATCTCGGCGTCTGGCTGAAGCCGGAAGGTTTCCCACATCAGGAAATTCGTCAGTACTCTTTGACTCGCAAACCGGATGGCAAAGGCTATCGTATTGCGGTGAAACGCGAAGAGGGTGGGCAGGTATCCAACTGGTTGCACAATCACGCCAATGTTGGCGATGTCGTGAAACTGGTCGCTCCGGCAGGTGATTTCTTTATGGCTGTCGCAGATGACACACCAGTGACGTTAATCTCTGCCGGTGTTGGTCAAACGCCAATGCTGGCAATGCTCGACACGCTGGCAAAAGCAGGCCACACAGCACAAGTGAACTGGTTCCATGCGGCAGAAAATGGCGATGTTCACGCCTTTGCCGATGAAGTTAAGGAACTGGGGCAGTCACTGCCGCGCTTTACCGCGCACACCTGGTATCGTCAGCCGAGCGAAGCCGATCGCGCTAAAGGTCAGTTTGATAGCGAAGGTCTGATGGATTTGAGCAAACTGGAAGGTGCGTTCAGCGATCCGACAATGCAGTTCTATCTCTGCGGCCCGGTTGGCTTCATGCAGTTTACCGCGAAACAGTTAGTGGATCTGGGCGTGAAGCAGGAAAACATTCATTACGAATGCTTTGGCCCGCATAAGGTGCTGTAA')
complementary_strand <- function(sequence) {
complement <- chartr("ATGC", "TACG", sequence)
return(complement)
}
complementary_sequence<- complementary_strand(DNASequence)
print(complementary_sequence)
sequence <- c('ATGCTTGACGCTCAAACCATCGC')
complementary_strand <- function(sequence) {
complement <- chartr("ATGC", "TACG", sequence)
return(complement)
}
complementary_sequence <-complementary_strand(sequence)
reverse <- stri_reverse(sequence)
complementary_reverse <- complementary_strand(reverse)
c('complementaria: ', complementary_sequence, 'reversa: ', reverse, 'reversa complementaria: ', complementary_reverse)
DNASequence <- c('ATGCTTGACGCTCAAACCATCGCTACAGTAAAAGCCACCATCCCTTTACTGGTGGAAACGGGGCCAAAGTTAACCGCCCATTTCTACGACCGTATGTTTACTCATAACCCAGAACTCAAAGAAATTTTTAACATGAGTAACCAGCGTAATGGCGATCAACGTGAAGCCCTGTTTAACGCTATTGCCGCCTACGCCAGTAATATTGAAAACCTGCCTGCGCTGCTGCCAGCGGTAGAAAAAATCGCGCAGAAGCACACCAGCTTCCAGATCAAACCGGAACAGTACAACATCGTCGGTGAACACCTGTTGGCAACGCTGGACGAAATGTTCAGCCCGGGGCAGGAAGTGCTGGACGCGTGGGGTAAAGCCTATGGTGTACTGGCTAATGTATTTATCAATCGCGAGGCGGAAATCTATAACGAAAACGCCAGCAAAGCCGGTGGTTGGGAAGGTACTCGCGATTTCCGCATTGTGGCTAAAACACCGCGCAGCGCGCTTATCACCAGCTTCGAACTGGAGCCGGTCGACGGTGGCGCAGTGGCAGAATACCGTCCGGGGCAATATCTCGGCGTCTGGCTGAAGCCGGAAGGTTTCCCACATCAGGAAATTCGTCAGTACTCTTTGACTCGCAAACCGGATGGCAAAGGCTATCGTATTGCGGTGAAACGCGAAGAGGGTGGGCAGGTATCCAACTGGTTGCACAATCACGCCAATGTTGGCGATGTCGTGAAACTGGTCGCTCCGGCAGGTGATTTCTTTATGGCTGTCGCAGATGACACACCAGTGACGTTAATCTCTGCCGGTGTTGGTCAAACGCCAATGCTGGCAATGCTCGACACGCTGGCAAAAGCAGGCCACACAGCACAAGTGAACTGGTTCCATGCGGCAGAAAATGGCGATGTTCACGCCTTTGCCGATGAAGTTAAGGAACTGGGGCAGTCACTGCCGCGCTTTACCGCGCACACCTGGTATCGTCAGCCGAGCGAAGCCGATCGCGCTAAAGGTCAGTTTGATAGCGAAGGTCTGATGGATTTGAGCAAACTGGAAGGTGCGTTCAGCGATCCGACAATGCAGTTCTATCTCTGCGGCCCGGTTGGCTTCATGCAGTTTACCGCGAAACAGTTAGTGGATCTGGGCGTGAAGCAGGAAAACATTCATTACGAATGCTTTGGCCCGCATAAGGTGCTGTAA')
complementary_strand <- function(sequence) {
complement <- chartr("ATGC", "TACG", sequence)
return(complement)
}
complementary_sequence<- complementary_strand(DNASequence)
print(complementary_sequence)
reverse <- stri_reverse(DNASequence)
print(reverse)
print(complementary_sequence)
gc()
library(stringi)
library(seqinr)
DNASequence <- c('ATGCTTGACGCTCAAACCATCGCTACAGTAAAAGCCACCATCCCTTTACTGGTGGAAACGGGGCCAAAGTTAACCGCCCATTTCTACGACCGTATGTTTACTCATAACCCAGAACTCAAAGAAATTTTTAACATGAGTAACCAGCGTAATGGCGATCAACGTGAAGCCCTGTTTAACGCTATTGCCGCCTACGCCAGTAATATTGAAAACCTGCCTGCGCTGCTGCCAGCGGTAGAAAAAATCGCGCAGAAGCACACCAGCTTCCAGATCAAACCGGAACAGTACAACATCGTCGGTGAACACCTGTTGGCAACGCTGGACGAAATGTTCAGCCCGGGGCAGGAAGTGCTGGACGCGTGGGGTAAAGCCTATGGTGTACTGGCTAATGTATTTATCAATCGCGAGGCGGAAATCTATAACGAAAACGCCAGCAAAGCCGGTGGTTGGGAAGGTACTCGCGATTTCCGCATTGTGGCTAAAACACCGCGCAGCGCGCTTATCACCAGCTTCGAACTGGAGCCGGTCGACGGTGGCGCAGTGGCAGAATACCGTCCGGGGCAATATCTCGGCGTCTGGCTGAAGCCGGAAGGTTTCCCACATCAGGAAATTCGTCAGTACTCTTTGACTCGCAAACCGGATGGCAAAGGCTATCGTATTGCGGTGAAACGCGAAGAGGGTGGGCAGGTATCCAACTGGTTGCACAATCACGCCAATGTTGGCGATGTCGTGAAACTGGTCGCTCCGGCAGGTGATTTCTTTATGGCTGTCGCAGATGACACACCAGTGACGTTAATCTCTGCCGGTGTTGGTCAAACGCCAATGCTGGCAATGCTCGACACGCTGGCAAAAGCAGGCCACACAGCACAAGTGAACTGGTTCCATGCGGCAGAAAATGGCGATGTTCACGCCTTTGCCGATGAAGTTAAGGAACTGGGGCAGTCACTGCCGCGCTTTACCGCGCACACCTGGTATCGTCAGCCGAGCGAAGCCGATCGCGCTAAAGGTCAGTTTGATAGCGAAGGTCTGATGGATTTGAGCAAACTGGAAGGTGCGTTCAGCGATCCGACAATGCAGTTCTATCTCTGCGGCCCGGTTGGCTTCATGCAGTTTACCGCGAAACAGTTAGTGGATCTGGGCGTGAAGCAGGAAAACATTCATTACGAATGCTTTGGCCCGCATAAGGTGCTGTAA')
complementary_strand <- function(sequence) {
complement <- chartr("ATGC", "TACG", sequence)
return(complement)
}
complementary_sequence<- complementary_strand(DNASequence)
print(complementary_sequence)
reverse <- stri_reverse(DNASequence)
print(reverse)
DNASequence <- c('ATGCTTGACGCTCAAACCATCGCTACAGTAAAAGCCACCATCCCTTTACTGGTGGAAACGGGGCCAAAGTTAACCGCCCATTTCTACGACCGTATGTTTACTCATAACCCAGAACTCAAAGAAATTTTTAACATGAGTAACCAGCGTAATGGCGATCAACGTGAAGCCCTGTTTAACGCTATTGCCGCCTACGCCAGTAATATTGAAAACCTGCCTGCGCTGCTGCCAGCGGTAGAAAAAATCGCGCAGAAGCACACCAGCTTCCAGATCAAACCGGAACAGTACAACATCGTCGGTGAACACCTGTTGGCAACGCTGGACGAAATGTTCAGCCCGGGGCAGGAAGTGCTGGACGCGTGGGGTAAAGCCTATGGTGTACTGGCTAATGTATTTATCAATCGCGAGGCGGAAATCTATAACGAAAACGCCAGCAAAGCCGGTGGTTGGGAAGGTACTCGCGATTTCCGCATTGTGGCTAAAACACCGCGCAGCGCGCTTATCACCAGCTTCGAACTGGAGCCGGTCGACGGTGGCGCAGTGGCAGAATACCGTCCGGGGCAATATCTCGGCGTCTGGCTGAAGCCGGAAGGTTTCCCACATCAGGAAATTCGTCAGTACTCTTTGACTCGCAAACCGGATGGCAAAGGCTATCGTATTGCGGTGAAACGCGAAGAGGGTGGGCAGGTATCCAACTGGTTGCACAATCACGCCAATGTTGGCGATGTCGTGAAACTGGTCGCTCCGGCAGGTGATTTCTTTATGGCTGTCGCAGATGACACACCAGTGACGTTAATCTCTGCCGGTGTTGGTCAAACGCCAATGCTGGCAATGCTCGACACGCTGGCAAAAGCAGGCCACACAGCACAAGTGAACTGGTTCCATGCGGCAGAAAATGGCGATGTTCACGCCTTTGCCGATGAAGTTAAGGAACTGGGGCAGTCACTGCCGCGCTTTACCGCGCACACCTGGTATCGTCAGCCGAGCGAAGCCGATCGCGCTAAAGGTCAGTTTGATAGCGAAGGTCTGATGGATTTGAGCAAACTGGAAGGTGCGTTCAGCGATCCGACAATGCAGTTCTATCTCTGCGGCCCGGTTGGCTTCATGCAGTTTACCGCGAAACAGTTAGTGGATCTGGGCGTGAAGCAGGAAAACATTCATTACGAATGCTTTGGCCCGCATAAGGTGCTGTAA')
complementary_strand <- function(sequence) {
complement <- chartr("ATGC", "TACG", sequence)
return(complement)
}
complementary_sequence<- complementary_strand(DNASequence)
print(complementary_sequence)
reverse <- stri_reverse(DNASequence)
print(reverse)
DNAtoRNA <- function(sequence) {
RNA <- gsub("T", "U", sequence)
return(RNA)
}
RNA <- DNAtoRNA(complementary_sequence)
print(RNA)
codon <- list(ATA = "I", AUC = "I", AUU = "I", AUG = "M", ACA = "T",
ACC = "T", ACG = "T", ACU = "T", AAC = "N", AAU = "N", AAA = "K",
AAG = "K", AGC = "S", AGT = "S", AGA = "R", AGG = "R", CTA = "L",
CUC = "L", CUG = "L", CUU = "L", CCA = "P", CCC = "P", CCG = "P",
CCU = "P", CAC = "H", CAU = "H", CAA = "Q", CAG = "Q", CGA = "R",
CGC = "R", CGG = "R", CGU = "R", GUA = "V", GUC = "V", GUG = "V",
GUU = "V", GCA = "A", GCC = "A", GCG = "A", GCU = "A", GAC = "D",
GAU = "D", GAA = "E", GAG = "E", GGA = "G", GGC = "G", GGG = "G",
GGU = "G", UCA = "S", UCC = "S", UCG = "S", UCU = "S", UUC = "F",
UUU = "F", UUA = "L", UUUG = "L", UAC = "Y", UAU = "Y", UAA = "stop",
UAG = "stop", UGC = "C", UGU = "C", UGA = "stop", UGG = "W")
codons <- stri_sub(RNA, seq(1, nchar(RNA), by = 3), length = 3)
amino_acids <- sapply(codons, function(x) codon[[x]])
amino_acids_string <- paste(amino_acids, collapse = "")
print(amino_acids_string)
```{r}
library(Biostrings)
library(stringi)
library(Biostrings)
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
source("http://bioconductor.org/biocLite.R")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.18")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.18")
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))
BiocManager::available()
BiocManager::install()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
require(Biostrings)
library(stringi)
source("http://bioconductor.org/biocLite.R")
help.start()
BiocManager::install()
source("http://bioconductor.org/biocLite.R")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("package_name")
> library(BiocManager)
library(BiocManager)
source("http://bioconductor.org/biocLite.R")
BiocManager::install("Bioconductor")
source("http://bioconductor.org/biocLite.R")
install.packages("BiocManager")
install.packages("BiocManager")
source("http://bioconductor.org/biocLite.R")
BiocManager::install()
BiocManager::install(version = "devel")
BiocManager::install(version = "devel")
source("http://bioconductor.org/biocLite.R")
BiocManager::install(version = "3.18")
BiocManager::install(version = "devel")
BiocManager::install(version = "3.18")
BiocManager::valid()
BiocManager::install(c(
"ggplot2", "knitr"
), update = TRUE, ask = FALSE, force = TRUE)
BiocManager::valid()
BiocManager::install(c(
"ggplot2", "knitr"
), update = TRUE, ask = FALSE, force = TRUE)
source("http://bioconductor.org/biocLite.R")
docker run \
docker run
biocLite("Biostrings")
source("http://bioconductor.org/biocLite.R")
library(utils)
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
require(Biostrings)
library(utils)
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
require(Biostrings)
require(Biostrings)
biocLite("Biostrings")
source("http://bioconductor.org/biocLite.R")
library(seqinr)
ZIKA <-read.fasta(file="src/Zika.fasta",  as.string = TRUE)
SARS<-read.fasta(file="src/SARS.fasta", as.string = TRUE)
WUHAN <-read.fasta(file="src/Wuhan.fasta",  as.string = TRUE)
MIDDLE<-read.fasta(file="src/Middle.fasta", as.string = TRUE)
DENGUE<-read.fasta(file="src/Dengue.fasta", as.string = TRUE)
H1N185<-read.fasta(file="src/85.fasta", as.string = TRUE)
H1N186<-read.fasta(file="src/86.fasta", as.string = TRUE)
H1N187<-read.fasta(file="src/87.fasta", as.string = TRUE)
H1N188<-read.fasta(file="src/88.fasta", as.string = TRUE)
H1N189<-read.fasta(file="src/89.fasta", as.string = TRUE)
H1N190<-read.fasta(file="src/90.fasta", as.string = TRUE)
H1N191<-read.fasta(file="src/91.fasta", as.string = TRUE)
H1N192<-read.fasta(file="src/92.fasta", as.string = TRUE)
library(seqinr)
sizeZIKA <- length(ZIKA)
sizeSARS <- length(SARS)
sizeWUHAN <- length(WUHAN)
sizeMIDDLE <- length(MIDDLE)
sizeDENGUE <- length(DENGUE)
sizeH1N185 <- length(H1N185)
sizeH1N186 <- length(H1N186)
sizeH1N187 <- length(H1N187)
sizeH1N188 <- length(H1N188)
sizeH1N189 <- length(H1N189)
sizeH1N190 <- length(H1N190)
sizeH1N191 <- length(H1N191)
sizeH1N192 <- length(H1N192)
ZIKA <-read.fasta(file="src/Zika.fasta",  as.string = TRUE)
SARS<-read.fasta(file="src/SARS.fasta", as.string = TRUE)
WUHAN <-read.fasta(file="src/Wuhan.fasta",  as.string = TRUE)
MIDDLE<-read.fasta(file="src/Middle.fasta", as.string = TRUE)
DENGUE<-read.fasta(file="src/Dengue.fasta", as.string = TRUE)
H1N185<-read.fasta(file="src/85.fasta", as.string = TRUE)
H1N186<-read.fasta(file="src/86.fasta", as.string = TRUE)
H1N187<-read.fasta(file="src/87.fasta", as.string = TRUE)
H1N188<-read.fasta(file="src/88.fasta", as.string = TRUE)
H1N189<-read.fasta(file="src/89.fasta", as.string = TRUE)
H1N190<-read.fasta(file="src/90.fasta", as.string = TRUE)
H1N191<-read.fasta(file="src/91.fasta", as.string = TRUE)
H1N192<-read.fasta(file="src/92.fasta", as.string = TRUE)
library(seqinr)
sizeZIKA <- length(ZIKA)
sizeSARS <- length(SARS)
sizeWUHAN <- length(WUHAN)
sizeMIDDLE <- length(MIDDLE)
sizeDENGUE <- length(DENGUE)
sizeH1N185 <- length(H1N185)
sizeH1N186 <- length(H1N186)
sizeH1N187 <- length(H1N187)
sizeH1N188 <- length(H1N188)
sizeH1N189 <- length(H1N189)
sizeH1N190 <- length(H1N190)
sizeH1N191 <- length(H1N191)
sizeH1N192 <- length(H1N192)
library(Biostrings)
library(reshape2)
library(ggplot2)
sequences <- list(ZIKA = ZIKA, SARS = SARS, WUHAN = WUHAN, MIDDLE = MIDDLE, DENGUE = DENGUE)
library(Biostrings)
library(reshape2)
library(ggplot2)
calculate_nucleotide_composition <- function(sequence) {
dna_sequence <- DNAString(sequence)
nucleotide_count <- letterFrequency(dna_sequence, letters=c("A", "G", "T", "C"))
nucleotide_percentage <- nucleotide_count / sum(nucleotide_count) * 100
result <- nucleotide_percentage
return(result)
}
sequences <- list(ZIKA = ZIKA, SARS = SARS, WUHAN = WUHAN, MIDDLE = MIDDLE, DENGUE = DENGUE)
nucleotide_compositions <- lapply(sequences, calculate_nucleotide_composition)
aInZIKA <- nucleotide_compositions[["ZIKA"]]["A"]
ls
cd
if (!require(Biostrings)) {
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
}
